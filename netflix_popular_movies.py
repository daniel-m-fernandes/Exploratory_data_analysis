# -*- coding: utf-8 -*-
"""Netflix popular movies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ukDoGwvyAZHFDBWuYsk5bJW-krIEKZa-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# **About the Dataset**

##Netflix popular movies dataset

This data is all about Movies That are available on Netflix Website movies title, cast of the movie,desc of movies, duration, rating on IMDB, voted by people, year, genre, certificate

This dataset comes from the IMDB website data is collected by using web scraping (it wasn't me that makes the web scraping)

> Source: https://www.kaggle.com/datasets/narayan63/netflix-popular-movies-dataset

## Importing the dataset
"""

dataset = pd.read_csv('n_movies.csv', sep = ',') # importing the dataset with using the comma as separator
dataset.head(5)                                  # showing the five firsts lines with the dataset

"""# **General condition of the dataset analysis** *texto em itálico*

## Dataset shape
"""

dataset.shape # looking the quantities of lines and columns have in this dataset

dataset.info() # looking the data type of each column and how many values nulls have in this dataset

"""**Insight 1:**

> The column "ratings" is the only column that the data type is float numbers. The others is strings.


> The columns "title", "description" and "stars" are full completed. The others haves null campes.

## Handling data-type errors
"""

dataset.votes = dataset.votes.str.replace(',', '').astype(float) # converting the column "votes" from strings to floats numbers

dataset.head(1)

dataset.info() # looking again the data-types to confirme if the transform above it worked out

"""Yes, it worked! Now it remains to transform the others."""

dataset.duration = dataset.duration.str.replace(' min', '').astype(float) # converting the column "duration" from strings to floats numbers

dataset.head(1) # It worked!

dataset.year.unique() # Looking the all values that the column "year" have.

"""The most values in the "year" column is irregular."""

dataset.year.fillna('0000', inplace=True) # Starting the regularization replacing NA camps with '0000', i will explain later.

dataset.year.unique() # Checking if work out. And it worked out!

# Creating the list of the inconcistences to remove of the column "year" ahead
list_to_remove = [' ', 'Video', 'video', '-', '–', '(',')','TV','I','V','X','L', 'T', 'nan','Movie','Special', 'Short','Podcast','Series', 'Music','Game']

# I couldn't use the list to replace, so i used the loop traversing the list.
for l in list_to_remove:
  dataset.year = dataset.year.str.replace(l, '')

dataset.year.unique() # Checking if it worked out. And it worked out!

years = dataset.year
years_corrects = []
for year in years:
  years_corrects.append(year[-4::]) # Using only the last four characters that characterize the lasts years of productions and putting them in a list.
years_corrects

len(years_corrects) # Checking the size of the list to see if it has the year column row quantities in the dataset

dataset.year = years_corrects # Replacing the original rows with the treated list

dataset.head() # Checking if it was worked. And it worked!

"""I decided convert the year column in integer rather than data because we haves only year and not the completed date.

## Splitting genres column

It was necessary split the cinematic genres column so that genres could be analyzed individually later
"""

expand_genres = dataset['genre'].str.split(", ", n = 2, expand = True) # Splitting the genres column
for genre in range(0,3): # Creating the new genres columns individually
  dataset[f'genre{genre}'] = expand_genres[genre]
dataset.head()

"""# Starting analysis

## Ratings statistics

#### Rating column boxplot

Let's see a ratings column boxplot to visualize the outliers
"""

plt.figure(figsize = (20,4))
sns.boxplot(dataset['rating'])

dataset['rating'].min() # The minor note

dataset.query("rating == 1.7") # There is only one rating of the movie that has the lowest rating

dataset['n'] = 1 # Creating a temporary column with 1 for to estimate and remove the movies that have only one rating
dataset.head()

less_ten = dataset[['title', 'n']].groupby('title', as_index = False).sum().sort_values(by = 'n', ascending=False) # Groupping the movies summing the "n" column
less_five = less_five.query("n < 10") # Filtering the movies that has less than 10 rantings
less_five = less_five.index.to_list() # Corverting to list
len(less_five) # Conferring the rows number

"""There's most movies that has only one rating"""

dataset.drop(teste, inplace = True) # Dropping the movies that has only one rating
dataset.head()

dataset.drop('n', axis = 1, inplace = True)
dataset.reset_index(inplace = True)

"""### Rating column boxplot after remove movies with less than 10 ratings"""

plt.figure(figsize = (20,4))
ax = sns.boxplot(dataset['rating'])

"""### Dropping the outliers"""

ax = sns.catplot(data = dataset, x = 'rating', height=3, aspect=5) # Ratings scatterplot

"""There are some classifications of outliers. I will remove reviews with less than 5 reviews."""

less_five = dataset[['title', 'rating']].query("rating < 5").drop('rating', axis = 1) # Filtering movies
less_five = less_five.index.to_list() # Converting to list
dataset.drop(less_five, inplace = True) # Dropping movies from the list

plt.figure(figsize = (20,4))
ax = sns.boxplot(dataset['rating'])

"""## Which genres appeared the most?"""

# Joining all genres in one column
genres_list = dataset.genre0.to_list() + dataset.genre1.to_list() + dataset.genre2.to_list()
len(genres_list) # Checking if it worked. And it worked!

df_genres = pd.DataFrame({'genre': genres_list}) # Creating a dataframe with the above list
df_genres.reset_index(inplace=True) # Recreating a new index column and setting the value of this column for 1 for it to be groupe later
df_genres['index'] = 1
df_genres.rename(columns= {'index': 'count'}, inplace = True)
df_genres = df_genres.groupby('genre', as_index=False).sum().sort_values(by = 'count', ascending = False)
df_genres.head()

"""####R: The genres Drama and Comedy has been the most appeared."""

sns.set_theme(context='notebook', style='whitegrid', font_scale=1, color_codes=True)
sns.set_palette("Blues", 5)
ax = sns.catplot(data = df_genres.head(), x = 'count', y = 'genre', kind='bar', height=5, aspect=3)

"""## What movies that most has been evaluated?"""

dataset['title'].value_counts().head().sort_values(ascending=True).plot(kind='barh', figsize=(6,6))

"""####R: Top Gear, Bleach, The Queens and the Conqueror, Avatar: The Last Airbender and Johnny Test"""